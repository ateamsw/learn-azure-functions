trigger:
  branches:
    include:
    - master
  paths:
    include:
    - .azure/pipelines.yaml
    - terraform/*

variables:
  terraform_directory: './terraform'
  source_directory: '$(System.DefaultWorkingDirectory)/src'

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
  displayName: Download Code
  clean: true
  fetchDepth: 5
  lfs: true

# - task: AzureCLI@2
#   displayName: Terraform Apply
#   inputs:
#     azureSubscription: $(service_connection_name)
#     scriptType: bash
#     scriptLocation: inlineScript
#     addSpnToEnvironment: true
#     workingDirectory: $(terraform_directory)
#     inlineScript: |
#       export ARM_CLIENT_ID=$servicePrincipalId
#       export ARM_CLIENT_SECRET=$servicePrincipalKey
#       export ARM_SUBSCRIPTION_ID=$(az account show -o json | jq -r '.id')
#       export ARM_TENANT_ID=$(az account show -o json | jq -r '.tenantId')
      
#       terraform init \
#         -backend-config="storage_account_name=$(tfstate_storage_account_name)" \
#         -backend-config="container_name=$(tfstate_container_name)" \
#         -backend-config="key=$(tfstate_key)" \
#         -backend-config="access_key=$(tfstate_access_key)"

#       terraform plan \
#         -out=out.tfplan \
#         -var='resource_name=$(resource_name)' \
#         -var='location=$(location)' \
#         -var='cosmos_ip_range_filter=$(cosmos_ip_range_filter)'
      
#       terraform apply out.tfplan

- task: DotNetCoreCLI@2
  displayName: 'Build Function'
  inputs:
    command: publish
    projects: |
      $(source_directory)/*.csproj
    arguments: --output $(System.ArtifactsDirectory) --configuration Release
    zipAfterPublish: True

# - task: ArchiveFiles@2
#   displayName: 'Archive Artifact'
#   inputs:
#     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
#     includeRootFolder: false
#     archiveType: zip
#     archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#     replaceExistingArchive: true

# - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#   artifact: drop

# - task: AzureFunctionApp@1
#   displayName: 'Deploy Function'
#   inputs:
#     azureSubscription: $(service_connection_name)
#     appType: functionAppLinux
#     appName: 'cdw-azfuncdemo-20200825-app'
#     # package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
#     package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

- task: AzureFunctionApp@1 # Add this at the end of your file
  displayName: 'Deploy Function'
  inputs:
    azureSubscription: $(service_connection_name)
    appType: functionAppLinux
    appName: 'cdw-azfuncdemo-20200825-app'
    package: $(System.ArtifactsDirectory)/**/*.zip